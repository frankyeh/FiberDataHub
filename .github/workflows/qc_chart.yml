name: Plot QC Sample Counts & Publish Chart

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'    # daily at 02:00 UTC

jobs:
  plot-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python deps
      run: pip install pandas matplotlib seaborn requests

    - name: Generate QC counts chart
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        cat << 'EOF' > plot_qc_counts.py
        #!/usr/bin/env python3
        import os, io, requests
        import pandas as pd
        import matplotlib.pyplot as plt
        import seaborn as sns

        token = os.getenv('PAT_TOKEN')
        headers = {'Authorization': f'token {token}'}

        # fetch qc-data release
        resp = requests.get(
          "https://api.github.com/repos/frankyeh/FiberDataHub/releases/tags/qc-data",
          headers=headers)
        resp.raise_for_status()
        assets = resp.json().get('assets', [])

        counts, labels = [], []
        for a in assets:
            name = a['name']
            if name.endswith('_qc.tsv'):
                r = requests.get(a['browser_download_url'], headers=headers)
                r.raise_for_status()
                df = pd.read_csv(io.StringIO(r.text), sep='\t')
                df = df[df['neighboring DWI correlation(masked)'] <= 1]
                df = df[df['DWI contrast'] != 1]
                counts.append(len(df))
                labels.append(name.replace('_qc.tsv',''))

        # build a color for each segment
        colors = sns.color_palette("tab20", len(counts))
        # extract accounts for the title
        accounts = sorted({lbl.split('_')[0] for lbl in labels})

        fig, ax = plt.subplots(figsize=(20, 3), dpi=100)
        x, y_bar = 0, 2
        for i, (ct, col, lbl) in enumerate(zip(counts, colors, labels)):
            # draw the bar segment
            ax.barh(y_bar, ct, left=x, height=0.6, color=col, edgecolor="white")
        
            # center of this segment
            cx = x + ct/2
        
            # choose label y-position and whether it's "above" (top) or "below"
            if i % 2 == 0:
                y_txt = 1.5 - (i % 5)*0.1
                is_top = True
            else:
                y_txt = 2.5 + (i % 5)*0.1
                is_top = False
        
            # draw pointer line
            delta   = y_bar - y_txt
            y_start = y_txt + delta * 0.25
            y_end   = y_bar - delta * 0.25
            ax.plot([cx, cx], [y_start, y_end], color="black", lw=1)
        
        
            # build the two‐line text: repo‐name and sample size
            repo_name = lbl.split('_')[-1]
            sample_text = f"(n={ct})"
            if is_top:
                text = f"{sample_text}\n{repo_name}"
            else:
                text = f"{repo_name}\n{sample_text}"
        
            # place the text
            ax.text(cx, y_txt, text, ha="center", va="center", fontsize=8)
        
            x += ct
        
        # overall total annotation
        total = sum(counts)
        ax.set_xlim(0, x*1.05)
        ax.set_ylim(1, 3)
        ax.axis("off")
        plt.title(f"All accounts total: {total}", pad=10)
        plt.tight_layout()
        plt.savefig('qc_counts.png')
        EOF
        python plot_qc_counts.py

    - name: Remove & Re-upload QC TSVs via GH CLI
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        for f in *.png; do
          echo "🗑  Deleting if-exists $f"
          gh release delete-asset qc-chart "$f" \
            --repo frankyeh/FiberDataHub -y || true

          echo "⬆️  Uploading $f"
          gh release upload qc-chart "$f" \
            --repo frankyeh/FiberDataHub
        done
