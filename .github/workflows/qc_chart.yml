name: Plot QC Sample Counts & Publish Chart

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'    # daily at 02:00 UTC

jobs:
  plot-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python deps
      run: pip install pandas matplotlib seaborn requests

    - name: Generate QC counts chart
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        cat << 'EOF' > plot_qc_counts.py
        #!/usr/bin/env python3
        import os, io, requests
        import pandas as pd
        import matplotlib.pyplot as plt
        import seaborn as sns

        token = os.getenv('PAT_TOKEN')
        headers = {'Authorization': f'token {token}'}

        # fetch qc-data release
        resp = requests.get(
          "https://api.github.com/repos/frankyeh/FiberDataHub/releases/tags/qc-data",
          headers=headers)
        resp.raise_for_status()
        assets = resp.json().get('assets', [])

        counts, labels = [], []
        for a in assets:
            name = a['name']
            if name.endswith('_qc.tsv'):
                r = requests.get(a['browser_download_url'], headers=headers)
                r.raise_for_status()
                df = pd.read_csv(io.StringIO(r.text), sep='\t')
                df = df[df['neighboring DWI correlation(masked)'] <= 1]
                df = df[df['DWI contrast'] != 1]
                counts.append(len(df))
                labels.append(name.replace('_qc.tsv',''))

        # build a color for each segment
        colors = sns.color_palette("tab20", len(counts))
        # extract accounts for the title
        accounts = sorted({lbl.split('_')[0] for lbl in labels})

        fig, ax = plt.subplots(figsize=(20, 3), dpi=100)
        x = 0
        prev_ct, prev_ct2 = 1000, 1000
        prev_offset, prev_offset2 = 0.25, 0.25
        grand_total     = sum(counts)
        
        label_toggle = False       # alternates only when we actually *draw* a label
        
        for ct, col, lbl in zip(counts, colors, labels):
            # draw the bar segment
            ax.barh(2, ct, left=x, height=0.2, color=col, edgecolor="white")
            cx = x + ct / 2
        
            # choose y-offset
            if prev_ct + prev_ct2 < 1000:
                y_offset = 0.35 if prev_offset2 == 0.25 else 0.25
            else:
                y_offset = 0.15
        
            if ct > 100:        # draw label only for sizeable segments
                # decide above / below using toggle
                if label_toggle:
                    y_txt, is_top = 2 + y_offset, False
                else:
                    y_txt, is_top = 2 - y_offset, True
                label_toggle = not label_toggle      # flip for next drawn label
        
                # pointer line (30 % of vertical gap)
                delta = 2 - y_txt
                y_start = y_txt + delta * 0.3
                y_end   = 2
                ax.plot([cx, cx], [y_start, y_end], color="black", lw=1)
        
                # label text
                repo_name   = lbl.split('_')[-1]
                sample_text = f"(n={ct})"
                text = f"{repo_name}\n{sample_text}" if is_top else f"{sample_text}\n{repo_name}"
                ax.text(cx, y_txt, text, ha="center", va="center", fontsize=8)
        
                # remember previous offsets/sizes used to compute next offset
                prev_offset2, prev_offset = prev_offset, y_offset
                prev_ct2,     prev_ct     = prev_ct,    ct
        
            x += ct
        
        # total annotation
        ax.text(x + max(counts) * 0.02, 2,
                f"Total samples: {grand_total}",
                ha="left", va="center", fontsize=10, fontweight="bold")
        
        # tidy & save
        ax.set_ylim(1.5, 2.5)
        ax.axis("off")
        plt.tight_layout()
        plt.savefig('qc_counts.png')
        EOF
        python plot_qc_counts.py

    - name: Remove & Re-upload QC TSVs via GH CLI
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        for f in *.png; do
          echo "üóë  Deleting if-exists $f"
          gh release delete-asset qc-chart "$f" \
            --repo frankyeh/FiberDataHub -y || true

          echo "‚¨ÜÔ∏è  Uploading $f"
          gh release upload qc-chart "$f" \
            --repo frankyeh/FiberDataHub
        done
