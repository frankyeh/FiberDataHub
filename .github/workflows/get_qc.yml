name: Fetch QC TSV & Publish Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'    # daily at 01:00 UTC

jobs:
  collect-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Download QC TSVs
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        mkdir -p qc_files
        accounts=(labsolver data-hcp data-openneuro data-abcd)
        for acct in "${accounts[@]}"; do
          echo "→ Account: $acct"

          # detect user vs org
          type=$(curl -s -H "Authorization: token $PAT_TOKEN" \
            "https://api.github.com/users/$acct" \
            | jq -r '.type')
          if [[ "$type" == "Organization" ]]; then
            repos_url="https://api.github.com/orgs/$acct/repos"
          else
            repos_url="https://api.github.com/users/$acct/repos"
          fi

          # list repos
          repos=$(curl -sf -H "Authorization: token $PAT_TOKEN" "$repos_url" \
                  | jq -r '.[].full_name')
          for full in $repos; do
            repo=$(basename "$full")
            echo "  • Repo: $repo"

            # fetch up to 8 releases
            releases=$(curl -sf -H "Authorization: token $PAT_TOKEN" \
              "https://api.github.com/repos/$full/releases?per_page=8") || {
                echo "     – no releases, skipping"; continue
              }

            # iterate each release object
            echo "$releases" \
              | jq -c 'select(type=="array")[]' \
              | while read -r rel; do
                  tag=$(echo "$rel" | jq -r '.tag_name')
                  asset_url=$(echo "$rel" \
                    | jq -r '.assets[]? | select(.name=="qc.tsv") | .browser_download_url')
                  if [[ -n "$asset_url" && "$asset_url" != "null" ]]; then
                    out="qc_files/${acct}_${repo}_${tag}_qc.tsv"
                    echo "      - downloading tag '$tag' → $out"
                    curl -sL -H "Authorization: token $PAT_TOKEN" \
                      "$asset_url" -o "$out"
                  fi
                done
          done
        done

    - name: Create or get release
      id: get_release
      uses: actions/github-script@v6
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const tag = 'qc-data'
          let rel
          try {
            rel = (await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            })).data
          } catch {
            rel = (await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              body: 'Automated QC TSV bundle'
            })).data
          }
          core.setOutput('id', rel.id)

    - name: Upload QC TSV assets
      uses: actions/github-script@v6
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        RELEASE_ID: ${{ steps.get_release.outputs.id }}
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const fs   = require('fs')
          const path = require('path')
          const relId = parseInt(process.env.RELEASE_ID, 10)
          const dir   = path.join(process.cwd(), 'qc_files')
          const files = fs.readdirSync(dir).filter(f => f.endsWith('_qc.tsv'))

          for (const file of files) {
            const data = fs.readFileSync(path.join(dir, file))
            console.log(`Uploading ${file}…`)
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: relId,
              name: file,
              data
            })
          }
