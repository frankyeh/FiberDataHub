name: Fetch QC TSV & Publish Release

on:
  workflow_dispatch:

jobs:
  collect-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Download QC TSVs (with pagination)
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        mkdir -p qc_files
        accounts=(labsolver data-hcp data-openneuro data-abcd)
        for acct in "${accounts[@]}"; do
          echo "‚Üí Account: $acct"

          # detect user vs org
          type=$(curl -s -H "Authorization: token $PAT_TOKEN" \
            "https://api.github.com/users/$acct" \
            | jq -r '.type')
          if [[ "$type" == "Organization" ]]; then
            repos_url="https://api.github.com/orgs/$acct/repos"
          else
            repos_url="https://api.github.com/users/$acct/repos"
          fi

          # list repos
          repos=$(curl -sf -H "Authorization: token $PAT_TOKEN" "$repos_url" \
                  | jq -r '.[].full_name')
          for full in $repos; do
            repo=$(basename "$full")
            echo "  ‚Ä¢ Repo: $repo"

            # page through all releases, 100 per page
            page=1
            while :; do
              releases=$(curl -sf -H "Authorization: token $PAT_TOKEN" \
                "https://api.github.com/repos/$full/releases?per_page=8&page=$page") || break

              count=$(echo "$releases" | jq 'length')
              [[ $count -eq 0 ]] && break

              echo "$releases" \
                | jq -c 'select(type=="array")[]' \
                | while read -r rel; do
                    tag=$(echo "$rel" | jq -r '.tag_name')
                    asset_url=$(echo "$rel" \
                      | jq -r '.assets[]? | select(.name=="qc.tsv") | .browser_download_url')
                    if [[ -n "$asset_url" && "$asset_url" != "null" ]]; then
                      out="qc_files/${acct}_${repo}_${tag}_qc.tsv"
                      echo "      - downloading tag '$tag' ‚Üí $out"
                      curl -sL -H "Authorization: token $PAT_TOKEN" \
                        "$asset_url" -o "$out"
                    fi
                  done

              page=$((page+1))
            done
          done
        done

    - name: Remove & Re-upload QC TSVs via GH CLI
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        cd qc_files
        for f in *_qc.tsv; do
          echo "üóë  Deleting if-exists $f"
          gh release delete-asset qc-data "$f" \
            --repo frankyeh/FiberDataHub -y || true

          echo "‚¨ÜÔ∏è  Uploading $f"
          gh release upload qc-data "$f" \
            --repo frankyeh/FiberDataHub
        done
